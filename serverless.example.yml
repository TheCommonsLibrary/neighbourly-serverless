# This file is the main config file for your service.
# For full config options, check the docs:
#    docs.serverless.com
# Happy Coding!

service: YOUR_SERVICE_NAME
app: YOUR_APP_NAME
tenant: YOUR_TENANT_NAME

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: ap-southeast-2
  memorySize: 1024 # optional, in MB, default is 1024
  timeout: 30 # optional, in seconds, default is 6

plugins:
  - serverless-offline

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# Optional deployment packaging configuration
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  getForBounds:
    handler: handler.getForBounds
    memorySize: 1024 # optional, in MB, default is 1024
    timeout: 30 # optional, in seconds, default is 6
    # Define function environment variables here
    environment:
      DATABASE_URL: YOUR_DB_URL (see docs for guidance)
      GOOGLE_MAPS_KEY: YOUR_GOOGLE_MAPS_API_KEY (see docs for guidance)
    # Events for testing with serverless-offline
    events:
      - http:
         path: /territories/bounds
         method: GET
  generateMap:
    handler: handler.generateMap
    memorySize: 1024 # optional, in MB, default is 1024
    timeout: 30 # optional, in seconds, default is 6
    # Define function environment variables here
    environment:
      DATABASE_URL: YOUR_DB_URL (see docs for guidance)
      GOOGLE_MAPS_KEY: YOUR_GOOGLE_MAPS_API_KEY (see docs for guidance)
    # Events for testing with serverless-offline
    events:
      - http:
         path: /map
         method: GET

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
